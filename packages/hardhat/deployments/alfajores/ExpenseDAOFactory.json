{
  "address": "0xB3AFe346d8F8FcAA59CCC16A343b4a35e6447746",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "reg",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "approvers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "newExpenseOrg",
      "outputs": [
        {
          "internalType": "contract ExpenseDAO",
          "name": "r",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72f35facba05589b23152bc4ec60cd3f7b42511219c1faa7d8f472c443f8637b",
  "receipt": {
    "to": null,
    "from": "0xBa0aE84f31a88e2e8436a27222A7b35c9d6a28e1",
    "contractAddress": "0xB3AFe346d8F8FcAA59CCC16A343b4a35e6447746",
    "transactionIndex": 0,
    "gasUsed": "3407014",
    "logsBloom": "0x
    "blockHash": "0xffcedb2884b8703eb28b1c6af8af16bc62668f7401f3e7310350d36ba0f091b7",
    "transactionHash": "0x72f35facba05589b23152bc4ec60cd3f7b42511219c1faa7d8f472c443f8637b",
    "logs": [],
    "blockNumber": 11682187,
    "cumulativeGasUsed": "3407014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x218C7Bc23F0d9dd94E83Eb1DF7714820a618E9B1"
  ],
  "numDeployments": 1,
  "solcInputHash": "087dd1c0707489ebbc4e5ab8a391fbb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"reg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"newExpenseOrg\",\"outputs\":[{\"internalType\":\"contract ExpenseDAO\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExpenseDAOFactory.sol\":\"ExpenseDAOFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ExpenseDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\ncontract ExpenseDAO is ReentrancyGuard, AccessControl {\\n  // User roles.\\n  bytes32 public constant MEMBER_ROLE = keccak256(\\\"MEMBER\\\");\\n  bytes32 public constant APPROVER_ROLE = keccak256(\\\"APPROVER\\\");\\n\\n  uint256 public numOfRequests;\\n  uint256 public deniedRequests;\\n  uint256 public approvedRequests;\\n  uint256 public paidOut;\\n\\n  struct ReimbursementRequest {\\n    uint256 id;\\n    uint256 amount;\\n    uint256 date;\\n    uint8 category;\\n    bool processed;\\n    bool approved;\\n    bool paid;\\n    address payable reimbursementAddress;\\n    address member;\\n    address paidBy;\\n    string description;\\n    string url;\\n  }\\n\\n  mapping(uint256 => ReimbursementRequest) private reimbursementRequests;\\n  mapping(address => uint256[]) private memberRequests;\\n  mapping(uint8 => uint256) private categoryCounters;\\n\\n  // Events.\\n  event NewRequestCreated(address indexed member, uint256 amount);\\n  event PaymentTransfered(\\n    address indexed approver,\\n    address indexed reimbursementAddress,\\n    uint256 amount);\\n  \\n  event BalanceIncreased(address indexed fromAddress, uint256 amount);\\n\\n  // Modifiers.\\n  modifier onlyApprover(string memory message) {\\n    require(hasRole(APPROVER_ROLE, msg.sender), message);\\n    _;\\n  }\\n\\n  modifier onlyMember(string memory message) {\\n    require(hasRole(MEMBER_ROLE, msg.sender), message);\\n    _;\\n  }\\n\\n  // Constructor.\\n  constructor(\\n    address[] memory approvers,\\n    address[] memory members) {\\n    \\n    for (uint256 i = 0; i < approvers.length; i++) {\\n      _setupRole(APPROVER_ROLE, approvers[i]);\\n    }\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      _setupRole(MEMBER_ROLE, members[i]);\\n    }\\n  }\\n\\n  // Creates new reimbursement request. Only members are allowed to call this\\n  // function.\\n  function createRequest(\\n    string calldata description,\\n    string calldata url,\\n    address reimbursementAddress,\\n    uint256 amount,\\n    uint256 date,\\n    uint8 category)\\n    external\\n    onlyMember(\\\"Only members are allowed to create requests\\\") {\\n\\n    uint256 requestId = numOfRequests++;\\n\\n    categoryCounters[category]++;\\n\\n    ReimbursementRequest storage request = reimbursementRequests[requestId];\\n    request.id = requestId;\\n    request.amount = amount;\\n    request.category = category;\\n    request.date = date;\\n    request.description = description;\\n    request.url = url;\\n    request.reimbursementAddress = payable(reimbursementAddress);\\n    request.member = msg.sender;\\n\\n    memberRequests[request.member].push(requestId);\\n\\n    emit NewRequestCreated(msg.sender, amount);\\n  }\\n\\n  // Used to approve or deny a request. Can be called by approvers only.\\n  function processRequest(uint256 requestId, bool approved)\\n    external\\n    onlyApprover(\\\"Only approvers are allowed to process requests\\\") {\\n\\n    ReimbursementRequest storage request = reimbursementRequests[requestId];\\n\\n    preProcess(request);\\n    request.approved = approved;\\n    if (request.approved) {\\n      approvedRequests++;\\n      payRequest(request);\\n    } else {\\n      deniedRequests++;\\n    }\\n\\n  }\\n\\n  // Checks preconditions.\\n  function preProcess(ReimbursementRequest storage request) private {\\n    if (request.processed || request.paid) {\\n      revert(\\\"Reimbursement request has been processed already\\\");\\n    }\\n    request.processed = true;\\n  }\\n\\n  // Transfers requested amount to reimbursement address.\\n  function payRequest(ReimbursementRequest storage request) private {\\n    if (request.paid) {\\n      revert(\\\"Reimbursement request has been paid already\\\");\\n    }\\n    if (!request.approved) {\\n      revert(\\\"Reimbursement request has been denied already\\\");\\n    }\\n    request.paid = true;\\n    request.paidBy = msg.sender;\\n    paidOut += request.amount;\\n\\n    emit PaymentTransfered(\\n      msg.sender,\\n      request.reimbursementAddress,\\n      request.amount);\\n\\n    return request.reimbursementAddress.transfer(request.amount);\\n  }\\n\\n  // Used to increase balance of the contract.\\n  receive() external payable {\\n    emit BalanceIncreased(msg.sender, msg.value);\\n  }\\n\\n  // Returns whether the sender has a member role.\\n  function isMember() public view returns (bool) {\\n    return hasRole(MEMBER_ROLE, msg.sender);\\n  }\\n\\n  // Returns whether the sender has an approver role.\\n  function isApprover() public view returns (bool) {\\n    return hasRole(APPROVER_ROLE, msg.sender);\\n  }\\n\\n  // Returns all relevant info about the organization.\\n  function getSummary() public view returns (\\n    uint256 requestsNum,\\n    uint256 approvedNum,\\n    uint256 deniedNum,\\n    uint256 category1,\\n    uint256 category2,\\n    uint256 category3,\\n    uint256 category4,\\n    uint256 category5,\\n    uint256 category6,\\n    uint256 paidTotal\\n   ) {\\n    requestsNum = numOfRequests;\\n    approvedNum = approvedRequests;\\n    deniedNum = deniedRequests;\\n    category1 = categoryCounters[1];\\n    category2 = categoryCounters[2];\\n    category3 = categoryCounters[3];\\n    category4 = categoryCounters[4];\\n    category5 = categoryCounters[5];\\n    category6 = categoryCounters[6];\\n    paidTotal = paidOut;\\n  }\\n\\n  // Returns all the reimbursement requests for the caller.\\n  function getMembersRequests()\\n    public\\n    view\\n    returns (ReimbursementRequest[] memory requests) {\\n\\n    uint256 size = memberRequests[msg.sender].length;\\n    requests = new ReimbursementRequest[](size);\\n    for (uint256 index = 0; index < size; index++) {\\n      requests[index] =\\n        reimbursementRequests[memberRequests[msg.sender][index]];\\n    }\\n  }\\n\\n  // Returns all the reimbursement requests.\\n  function getRequests()\\n    public\\n    view\\n    returns (ReimbursementRequest[] memory requests) {\\n    \\n    requests = new ReimbursementRequest[](numOfRequests);\\n    for (uint256 index = 0; index < numOfRequests; index++) {\\n        requests[index] = reimbursementRequests[index];\\n    }\\n  }\\n\\n  // Returns a particular reimbursement request for provided id.\\n  function getRequest(uint256 requestId)\\n    public\\n    view\\n    returns (ReimbursementRequest memory) {\\n\\n    return reimbursementRequests[requestId];\\n  }\\n}\\n\",\"keccak256\":\"0x85f2685b185342ba9e830aa4585cd717c1a0a0011e27b3f9c3005fd6e86587f5\",\"license\":\"MIT\"},\"contracts/ExpenseDAOFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpenseDAO.sol\\\";\\nimport \\\"./Registry.sol\\\";\\n\\ncontract ExpenseDAOFactory {\\n  Registry public registry;\\n\\n  constructor(Registry reg) {\\n    registry = reg;\\n  }\\n\\n  function newExpenseOrg(\\n    string calldata name,\\n    address[] calldata approvers,\\n    address[] calldata members)\\n    external returns (ExpenseDAO r) {\\n\\n    r = new ExpenseDAO(approvers, members);\\n    registry.register(name, r, msg.sender);\\n  }\\n}\",\"keccak256\":\"0x668f826584e725960c855e6e7f693c11271acd417894d171d8d7f642425c28e3\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpenseDAO.sol\\\";\\n\\ncontract Registry {\\n  event NewOrganizationRegistered(\\n    ExpenseDAO indexed organization, address indexed createdBy, string name);\\n  mapping(string => address) public organizations;\\n\\n  function register(\\n    string calldata name,\\n    ExpenseDAO newOrganization,\\n    address createdBy) external {\\n\\n    require(organizations[name] == address(0), \\\"Name already in use\\\");\\n    organizations[name] = address(newOrganization);\\n    emit NewOrganizationRegistered(newOrganization, createdBy, name);\\n  }\\n\\n}\",\"keccak256\":\"0x8357146013c3b26447d8e75917754b16679b0d322b7ede9f02b1709ff6aba683\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80637b103999146200003f578063920b073b1462000061575b600080fd5b6200004962000097565b60405162000058919062000460565b60405180910390f35b6200007f60048036038101906200007991906200025c565b620000bb565b6040516200008e919062000443565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600084848484604051620000cf906200019d565b620000de949392919062000404565b604051809103906000f080158015620000fb573d6000803e3d6000fd5b50905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637915c069888884336040518563ffffffff1660e01b81526004016200015f94939291906200047d565b600060405180830381600087803b1580156200017a57600080fd5b505af11580156200018f573d6000803e3d6000fd5b505050509695505050505050565b61367080620005d483390190565b600081359050620001bc81620005b9565b92915050565b60008083601f840112620001d557600080fd5b8235905067ffffffffffffffff811115620001ef57600080fd5b6020830191508360208202830111156200020857600080fd5b9250929050565b60008083601f8401126200022257600080fd5b8235905067ffffffffffffffff8111156200023c57600080fd5b6020830191508360018202830111156200025557600080fd5b9250929050565b600080600080600080606087890312156200027657600080fd5b600087013567ffffffffffffffff8111156200029157600080fd5b6200029f89828a016200020f565b9650965050602087013567ffffffffffffffff811115620002bf57600080fd5b620002cd89828a01620001c2565b9450945050604087013567ffffffffffffffff811115620002ed57600080fd5b620002fb89828a01620001c2565b92509250509295509295509295565b600062000318838362000324565b60208301905092915050565b6200032f8162000515565b82525050565b620003408162000515565b82525050565b6000620003548385620004da565b93506200036182620004c3565b8060005b85811015620003a2576200037a8284620004fc565b6200038688826200030a565b97506200039383620004cd565b92505060018101905062000365565b5085925050509392505050565b620003ba8162000549565b82525050565b620003cb8162000571565b82525050565b6000620003df8385620004eb565b9350620003ee83858462000599565b620003f983620005a8565b840190509392505050565b600060408201905081810360008301526200042181868862000346565b905081810360208301526200043881848662000346565b905095945050505050565b60006020820190506200045a6000830184620003af565b92915050565b6000602082019050620004776000830184620003c0565b92915050565b600060608201905081810360008301526200049a818688620003d1565b9050620004ab6020830185620003af565b620004ba604083018462000335565b95945050505050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200050d6020840184620001ab565b905092915050565b6000620005228262000529565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000556826200055d565b9050919050565b60006200056a8262000529565b9050919050565b60006200057e8262000585565b9050919050565b6000620005928262000529565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b620005c48162000515565b8114620005d057600080fd5b5056fe60806040523480156200001157600080fd5b5060405162003670380380620036708339818101604052810190620000379190620003a8565b600160008190555060005b8251811015620000d557620000bf7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a31848381518110620000ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516200017560201b60201c565b8080620000cc90620004e7565b91505062000042565b5060005b81518110156200016c57620001567fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16883838151811062000142577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516200017560201b60201c565b80806200016390620004e7565b915050620000d9565b505050620005be565b6200018782826200018b60201b60201c565b5050565b6200019d82826200027c60201b60201c565b6200027857600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200021d620002e760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600062000306620003008462000444565b6200041b565b905080838252602082019050828560208602820111156200032657600080fd5b60005b858110156200035a57816200033f888262000364565b84526020840193506020830192505060018101905062000329565b5050509392505050565b6000815190506200037581620005a4565b92915050565b600082601f8301126200038d57600080fd5b81516200039f848260208601620002ef565b91505092915050565b60008060408385031215620003bc57600080fd5b600083015167ffffffffffffffff811115620003d757600080fd5b620003e5858286016200037b565b925050602083015167ffffffffffffffff8111156200040357600080fd5b62000411858286016200037b565b9150509250929050565b6000620004276200043a565b9050620004358282620004b1565b919050565b6000604051905090565b600067ffffffffffffffff82111562000462576200046162000564565b5b602082029050602081019050919050565b6000620004808262000487565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620004bc8262000593565b810181811067ffffffffffffffff82111715620004de57620004dd62000564565b5b80604052505050565b6000620004f482620004a7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200052a576200052962000535565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620005af8162000473565b8114620005bb57600080fd5b50565b6130a280620005ce6000396000f3fe60806040526004361061012e5760003560e01c80637d12ba50116100ab578063a217fddf1161006f578063a217fddf14610446578063b3fc097114610471578063b6290e761461049a578063c58343ef146104c5578063d02982cf14610502578063d547741f1461052d57610183565b80637d12ba501461035d578063863e4d47146103885780638813ce12146103b357806391d14854146103de578063a10f469e1461041b57610183565b80634051ddac116100f25780634051ddac1461027f5780634245962b146102b3578063441db7ec146102de5780635c76ca2d14610309578063704836231461033457610183565b806301ffc9a714610188578063238b47ec146101c5578063248a9ca3146101f05780632f2ff15d1461022d57806336568abe1461025657610183565b36610183573373ffffffffffffffffffffffffffffffffffffffff167f7a702e80a9c183a6ce9d6732991df2e914555ba35a364a70aed2433984e7544b346040516101799190612a16565b60405180910390a2005b600080fd5b34801561019457600080fd5b506101af60048036038101906101aa91906122a0565b610556565b6040516101bc91906128fc565b60405180910390f35b3480156101d157600080fd5b506101da6105d0565b6040516101e791906128fc565b60405180910390f35b3480156101fc57600080fd5b506102176004803603810190610212919061223b565b610601565b6040516102249190612917565b60405180910390f35b34801561023957600080fd5b50610254600480360381019061024f9190612264565b610621565b005b34801561026257600080fd5b5061027d60048036038101906102789190612264565b610642565b005b34801561028b57600080fd5b506102946106c5565b6040516102aa9a99989796959493929190612a31565b60405180910390f35b3480156102bf57600080fd5b506102c8610790565b6040516102d59190612917565b60405180910390f35b3480156102ea57600080fd5b506102f36107b4565b6040516103009190612a16565b60405180910390f35b34801561031557600080fd5b5061031e6107ba565b60405161032b9190612a16565b60405180910390f35b34801561034057600080fd5b5061035b600480360381019061035691906123b5565b6107c0565b005b34801561036957600080fd5b506103726108de565b60405161037f91906128da565b60405180910390f35b34801561039457600080fd5b5061039d610d5c565b6040516103aa9190612a16565b60405180910390f35b3480156103bf57600080fd5b506103c8610d62565b6040516103d591906128da565b60405180910390f35b3480156103ea57600080fd5b5061040560048036038101906104009190612264565b61111b565b60405161041291906128fc565b60405180910390f35b34801561042757600080fd5b50610430611186565b60405161043d9190612917565b60405180910390f35b34801561045257600080fd5b5061045b6111aa565b6040516104689190612917565b60405180910390f35b34801561047d57600080fd5b50610498600480360381019061049391906122c9565b6111b1565b005b3480156104a657600080fd5b506104af611463565b6040516104bc9190612a16565b60405180910390f35b3480156104d157600080fd5b506104ec60048036038101906104e7919061238c565b611469565b6040516104f991906129f4565b60405180910390f35b34801561050e57600080fd5b50610517611749565b60405161052491906128fc565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190612264565b61177a565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105c957506105c88261179b565b5b9050919050565b60006105fc7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361111b565b905090565b600060016000838152602001908152602001600020600101549050919050565b61062a82610601565b61063381611805565b61063d8383611819565b505050565b61064a6118f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae906129d4565b60405180910390fd5b6106c18282611901565b5050565b60008060008060008060008060008060025499506004549850600354975060086000600160ff16815260200190815260200160002054965060086000600260ff16815260200190815260200160002054955060086000600360ff16815260200190815260200160002054945060086000600460ff16815260200190815260200160002054935060086000600560ff16815260200190815260200160002054925060086000600660ff168152602001908152602001600020549150600554905090919293949596979899565b7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a3181565b60035481565b60055481565b6040518060600160405280602e8152602001613014602e91396108037f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361111b565b8190610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9190612932565b60405180910390fd5b506000600660008581526020019081526020016000209050610866816119e3565b828160030160026101000a81548160ff0219169083151502179055508060030160029054906101000a900460ff16156108bf57600460008154809291906108ac90612d1a565b91905055506108ba81611a6e565b6108d8565b600360008154809291906108d290612d1a565b91905055505b50505050565b60606000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090508067ffffffffffffffff811115610967577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109a057816020015b61098d612024565b8152602001906001900390816109855790505b50915060005b81811015610d575760066000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610a29577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff161515151581526020016003820160039054906101000a900460ff161515151581526020016003820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054610bec90612ce8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1890612ce8565b8015610c655780601f10610c3a57610100808354040283529160200191610c65565b820191906000526020600020905b815481529060010190602001808311610c4857829003601f168201915b50505050508152602001600782018054610c7e90612ce8565b80601f0160208091040260200160405190810160405280929190818152602001828054610caa90612ce8565b8015610cf75780601f10610ccc57610100808354040283529160200191610cf7565b820191906000526020600020905b815481529060010190602001808311610cda57829003601f168201915b505050505081525050838281518110610d39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080610d4f90612d1a565b9150506109a6565b505090565b60045481565b606060025467ffffffffffffffff811115610da6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610ddf57816020015b610dcc612024565b815260200190600190039081610dc45790505b50905060005b6002548110156111175760066000828152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff161515151581526020016003820160039054906101000a900460ff161515151581526020016003820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054610fac90612ce8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd890612ce8565b80156110255780601f10610ffa57610100808354040283529160200191611025565b820191906000526020600020905b81548152906001019060200180831161100857829003601f168201915b5050505050815260200160078201805461103e90612ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461106a90612ce8565b80156110b75780601f1061108c576101008083540402835291602001916110b7565b820191906000526020600020905b81548152906001019060200180831161109a57829003601f168201915b5050505050815250508282815181106110f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061110f90612d1a565b915050610de5565b5090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16881565b6000801b81565b6040518060600160405280602b8152602001613042602b91396111f47fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1683361111b565b8190611236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122d9190612932565b60405180910390fd5b5060006002600081548092919061124c90612d1a565b919050559050600860008460ff1660ff168152602001908152602001600020600081548092919061127c90612d1a565b91905055506000600660008381526020019081526020016000209050818160000181905550858160010181905550838160030160006101000a81548160ff021916908360ff1602179055508481600201819055508a8a8260060191906112e39291906120d0565b5088888260070191906112f79291906120d0565b50868160030160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f23a574744299f6d7840c73914637acbc1340419b257011bbf94e0f48e158e8ca8760405161144e9190612a16565b60405180910390a25050505050505050505050565b60025481565b611471612024565b60066000838152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff161515151581526020016003820160029054906101000a900460ff161515151581526020016003820160039054906101000a900460ff161515151581526020016003820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461162e90612ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461165a90612ce8565b80156116a75780601f1061167c576101008083540402835291602001916116a7565b820191906000526020600020905b81548152906001019060200180831161168a57829003601f168201915b505050505081526020016007820180546116c090612ce8565b80601f01602080910402602001604051908101604052809291908181526020018280546116ec90612ce8565b80156117395780601f1061170e57610100808354040283529160200191611739565b820191906000526020600020905b81548152906001019060200180831161171c57829003601f168201915b5050505050815250509050919050565b60006117757fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1683361111b565b905090565b61178382610601565b61178c81611805565b6117968383611901565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611816816118116118f9565b611c8d565b50565b611823828261111b565b6118f557600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061189a6118f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61190b828261111b565b156119df5760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119846118f9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8060030160019054906101000a900460ff1680611a0e57508060030160039054906101000a900460ff165b15611a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a45906129b4565b60405180910390fd5b60018160030160016101000a81548160ff02191690831515021790555050565b8060030160039054906101000a900460ff1615611ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab790612994565b60405180910390fd5b8060030160029054906101000a900460ff16611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0890612954565b60405180910390fd5b60018160030160036101000a81548160ff021916908315150217905550338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001015460056000828254611b879190612b3e565b925050819055508060030160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffdb2bc0ebc2e58404f3ad5b20d3ec351f2b7b7bf6a21e18beaa7d296d2f01ba58360010154604051611c139190612a16565b60405180910390a38060030160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82600101549081150290604051600060405180830381858888f19350505050158015611c89573d6000803e3d6000fd5b5050565b611c97828261111b565b611d2657611cbc8173ffffffffffffffffffffffffffffffffffffffff166014611d2a565b611cca8360001c6020611d2a565b604051602001611cdb9291906128a0565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1d9190612932565b60405180910390fd5b5050565b606060006002836002611d3d9190612b94565b611d479190612b3e565b67ffffffffffffffff811115611d86577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611db85781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611e16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611ea0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611ee09190612b94565b611eea9190612b3e565b90505b6001811115611fd6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611f52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611f8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611fcf90612cbe565b9050611eed565b506000841461201a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201190612974565b60405180910390fd5b8091505092915050565b604051806101800160405280600081526020016000815260200160008152602001600060ff168152602001600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b8280546120dc90612ce8565b90600052602060002090601f0160209004810192826120fe5760008555612145565b82601f1061211757803560ff1916838001178555612145565b82800160010185558215612145579182015b82811115612144578235825591602001919060010190612129565b5b5090506121529190612156565b5090565b5b8082111561216f576000816000905550600101612157565b5090565b60008135905061218281612f89565b92915050565b60008135905061219781612fa0565b92915050565b6000813590506121ac81612fb7565b92915050565b6000813590506121c181612fce565b92915050565b60008083601f8401126121d957600080fd5b8235905067ffffffffffffffff8111156121f257600080fd5b60208301915083600182028301111561220a57600080fd5b9250929050565b60008135905061222081612fe5565b92915050565b60008135905061223581612ffc565b92915050565b60006020828403121561224d57600080fd5b600061225b8482850161219d565b91505092915050565b6000806040838503121561227757600080fd5b60006122858582860161219d565b925050602061229685828601612173565b9150509250929050565b6000602082840312156122b257600080fd5b60006122c0848285016121b2565b91505092915050565b60008060008060008060008060c0898b0312156122e557600080fd5b600089013567ffffffffffffffff8111156122ff57600080fd5b61230b8b828c016121c7565b9850985050602089013567ffffffffffffffff81111561232a57600080fd5b6123368b828c016121c7565b965096505060406123498b828c01612173565b945050606061235a8b828c01612211565b935050608061236b8b828c01612211565b92505060a061237c8b828c01612226565b9150509295985092959890939650565b60006020828403121561239e57600080fd5b60006123ac84828501612211565b91505092915050565b600080604083850312156123c857600080fd5b60006123d685828601612211565b92505060206123e785828601612188565b9150509250929050565b60006123fd838361265d565b905092915050565b61240e81612c00565b82525050565b61241d81612bee565b82525050565b600061242e82612add565b6124388185612b00565b93508360208202850161244a85612acd565b8060005b85811015612486578484038952815161246785826123f1565b945061247283612af3565b925060208a0199505060018101905061244e565b50829750879550505050505092915050565b6124a181612c12565b82525050565b6124b081612c12565b82525050565b6124bf81612c1e565b82525050565b60006124d082612ae8565b6124da8185612b11565b93506124ea818560208601612c8b565b6124f381612dc1565b840191505092915050565b600061250982612ae8565b6125138185612b22565b9350612523818560208601612c8b565b61252c81612dc1565b840191505092915050565b600061254282612ae8565b61254c8185612b33565b935061255c818560208601612c8b565b80840191505092915050565b6000612575602d83612b22565b915061258082612dd2565b604082019050919050565b6000612598602083612b22565b91506125a382612e21565b602082019050919050565b60006125bb602b83612b22565b91506125c682612e4a565b604082019050919050565b60006125de603083612b22565b91506125e982612e99565b604082019050919050565b6000612601601783612b33565b915061260c82612ee8565b601782019050919050565b6000612624601183612b33565b915061262f82612f11565b601182019050919050565b6000612647602f83612b22565b915061265282612f3a565b604082019050919050565b6000610180830160008301516126766000860182612873565b5060208301516126896020860182612873565b50604083015161269c6040860182612873565b5060608301516126af6060860182612891565b5060808301516126c26080860182612498565b5060a08301516126d560a0860182612498565b5060c08301516126e860c0860182612498565b5060e08301516126fb60e0860182612405565b50610100830151612710610100860182612414565b50610120830151612725610120860182612414565b5061014083015184820361014086015261273f82826124c5565b91505061016083015184820361016086015261275b82826124c5565b9150508091505092915050565b6000610180830160008301516127816000860182612873565b5060208301516127946020860182612873565b5060408301516127a76040860182612873565b5060608301516127ba6060860182612891565b5060808301516127cd6080860182612498565b5060a08301516127e060a0860182612498565b5060c08301516127f360c0860182612498565b5060e083015161280660e0860182612405565b5061010083015161281b610100860182612414565b50610120830151612830610120860182612414565b5061014083015184820361014086015261284a82826124c5565b91505061016083015184820361016086015261286682826124c5565b9150508091505092915050565b61287c81612c74565b82525050565b61288b81612c74565b82525050565b61289a81612c7e565b82525050565b60006128ab826125f4565b91506128b78285612537565b91506128c282612617565b91506128ce8284612537565b91508190509392505050565b600060208201905081810360008301526128f48184612423565b905092915050565b600060208201905061291160008301846124a7565b92915050565b600060208201905061292c60008301846124b6565b92915050565b6000602082019050818103600083015261294c81846124fe565b905092915050565b6000602082019050818103600083015261296d81612568565b9050919050565b6000602082019050818103600083015261298d8161258b565b9050919050565b600060208201905081810360008301526129ad816125ae565b9050919050565b600060208201905081810360008301526129cd816125d1565b9050919050565b600060208201905081810360008301526129ed8161263a565b9050919050565b60006020820190508181036000830152612a0e8184612768565b905092915050565b6000602082019050612a2b6000830184612882565b92915050565b600061014082019050612a47600083018d612882565b612a54602083018c612882565b612a61604083018b612882565b612a6e606083018a612882565b612a7b6080830189612882565b612a8860a0830188612882565b612a9560c0830187612882565b612aa260e0830186612882565b612ab0610100830185612882565b612abe610120830184612882565b9b9a5050505050505050505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b4982612c74565b9150612b5483612c74565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b8957612b88612d63565b5b828201905092915050565b6000612b9f82612c74565b9150612baa83612c74565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612be357612be2612d63565b5b828202905092915050565b6000612bf982612c54565b9050919050565b6000612c0b82612c54565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015612ca9578082015181840152602081019050612c8e565b83811115612cb8576000848401525b50505050565b6000612cc982612c74565b91506000821415612cdd57612cdc612d63565b5b600182039050919050565b60006002820490506001821680612d0057607f821691505b60208210811415612d1457612d13612d92565b5b50919050565b6000612d2582612c74565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d5857612d57612d63565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f5265696d62757273656d656e74207265717565737420686173206265656e206460008201527f656e69656420616c726561647900000000000000000000000000000000000000602082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5265696d62757273656d656e74207265717565737420686173206265656e207060008201527f61696420616c7265616479000000000000000000000000000000000000000000602082015250565b7f5265696d62757273656d656e74207265717565737420686173206265656e207060008201527f726f63657373656420616c726561647900000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612f9281612bee565b8114612f9d57600080fd5b50565b612fa981612c12565b8114612fb457600080fd5b50565b612fc081612c1e565b8114612fcb57600080fd5b50565b612fd781612c28565b8114612fe257600080fd5b50565b612fee81612c74565b8114612ff957600080fd5b50565b61300581612c7e565b811461301057600080fd5b5056fe4f6e6c7920617070726f766572732061726520616c6c6f77656420746f2070726f636573732072657175657374734f6e6c79206d656d626572732061726520616c6c6f77656420746f20637265617465207265717565737473a26469706673582212203d8b1f506628b11224a55e7e9185fb0224b3dfdddf8cb4f6669f7ab34bbf333164736f6c63430008040033a2646970667358221220adf32b742a4d8c73a249deee4e961f88d63b1c85c4d40c660eb47d2e44b88ee264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1711,
        "contract": "contracts/ExpenseDAOFactory.sol:ExpenseDAOFactory",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Registry)1919"
      }
    ],
    "types": {
      "t_contract(Registry)1919": {
        "encoding": "inplace",
        "label": "contract Registry",
        "numberOfBytes": "20"
      }
    }
  }
}