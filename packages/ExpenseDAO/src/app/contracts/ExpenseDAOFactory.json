{
  "address": "0xC2de25024831c69bdB7cd51E6D35Ac2C9dE6d13D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Registry",
          "name": "reg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "co2TokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stableCoin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "approvers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "newExpenseOrg",
      "outputs": [
        {
          "internalType": "contract ExpenseDAO",
          "name": "r",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2ce29456582b9b7285a076b0095ad5111a76242abcfba86ba26f6825eb55264",
  "receipt": {
    "to": null,
    "from": "0xBa0aE84f31a88e2e8436a27222A7b35c9d6a28e1",
    "contractAddress": "0xC2de25024831c69bdB7cd51E6D35Ac2C9dE6d13D",
    "transactionIndex": 3,
    "gasUsed": "4512422",
    "logsBloom": "0x
    "blockHash": "0x8ee130daa89692b2cf78c00eb666513142724d0ae9aa7edd5b578ab8a6378536",
    "transactionHash": "0xe2ce29456582b9b7285a076b0095ad5111a76242abcfba86ba26f6825eb55264",
    "logs": [],
    "blockNumber": 12079301,
    "cumulativeGasUsed": "4924715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x34b1CAf30bd24c78287EC723df7a6301DF91924a",
    "0xBf16Fc2DE060b710b400Fd61a18b5Ad662c834D1"
  ],
  "numDeployments": 8,
  "solcInputHash": "8d12def2753d9c3ed3d247be1c1fc3a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"reg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"co2TokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"approvers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"newExpenseOrg\",\"outputs\":[{\"internalType\":\"contract ExpenseDAO\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExpenseDAOFactory.sol\":\"ExpenseDAOFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/ExpenseDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\n\\n\\ncontract ExpenseDAO is ReentrancyGuard, AccessControlEnumerable {\\n  // User roles.\\n  bytes32 public constant MEMBER_ROLE = keccak256(\\\"MEMBER\\\");\\n  bytes32 public constant APPROVER_ROLE = keccak256(\\\"APPROVER\\\");\\n\\n  uint256 private numOfRequests;\\n  uint256 private deniedRequests;\\n  uint256 private approvedRequests;\\n  uint256 private paidOut;\\n  uint256 private totalCO2;\\n  uint256 private pendingCO2;\\n\\n  address public stableCoinAddress;\\n  address public CO2TokenAddress;\\n\\n  struct ReimbursementRequest {\\n    uint256 id;\\n    uint256 amount;\\n    uint256 date;\\n    uint256 co2;\\n    uint8 category;\\n    bool processed;\\n    bool approved;\\n    bool paid;\\n    address payable reimbursementAddress;\\n    address member;\\n    address paidBy;\\n    string description;\\n    string url;\\n  }\\n\\n  mapping(uint256 => ReimbursementRequest) private reimbursementRequests;\\n  mapping(address => uint256[]) private memberRequests;\\n  mapping(uint8 => uint256) private categoryCounters;\\n\\n  // Events.\\n  event NewRequestCreated(address indexed member, uint256 amount);\\n  event PaymentTransfered(\\n    address indexed approver,\\n    address indexed reimbursementAddress,\\n    uint256 amount);\\n\\n  event BalanceIncreased(address indexed fromAddress, uint256 amount);\\n\\n  // Modifiers.\\n  modifier onlyApprover(string memory message) {\\n    require(hasRole(APPROVER_ROLE, msg.sender), message);\\n    _;\\n  }\\n\\n  modifier onlyMember(string memory message) {\\n    require(hasRole(MEMBER_ROLE, msg.sender), message);\\n    _;\\n  }\\n\\n  modifier memberOrApprover(string memory message) {\\n    require(hasRole(MEMBER_ROLE, msg.sender) ||\\n      hasRole(APPROVER_ROLE, msg.sender), message);\\n    _;\\n  }\\n\\n  // Constructor.\\n  constructor(\\n    address stableToken,\\n    address co2Token,\\n    address[] memory approvers,\\n    address[] memory members) {\\n    \\n    // Set stable token address. Usually, it would be either cUSD or cEUR.\\n    stableCoinAddress = stableToken;\\n    // Set carbon credit token address.\\n    CO2TokenAddress = co2Token;\\n\\n    require(approvers.length > 1,\\n      \\\"At least two approver addresses must be provided\\\");\\n    for (uint256 i = 0; i < approvers.length; i++) {\\n      _setupRole(APPROVER_ROLE, approvers[i]);\\n      _setupRole(DEFAULT_ADMIN_ROLE, approvers[i]);\\n    }\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      _setupRole(MEMBER_ROLE, members[i]);\\n    }\\n  }\\n\\n  // Creates new reimbursement request. Only members and approvers are allowed\\n  // to call this function.\\n  function createRequest(\\n    string calldata description,\\n    string calldata url,\\n    address reimbursementAddress,\\n    uint256 amount,\\n    uint256 date,\\n    uint256 co2Amount,\\n    uint8 category)\\n    external\\n    memberOrApprover(\\\"You are not allowed to create requests\\\") {\\n\\n    uint256 requestId = numOfRequests++;\\n\\n    categoryCounters[category]++;\\n    pendingCO2 += co2Amount;\\n\\n    ReimbursementRequest storage request = reimbursementRequests[requestId];\\n    request.id = requestId;\\n    request.amount = amount;\\n    request.category = category;\\n    request.co2 = co2Amount;\\n    request.date = date;\\n    request.description = description;\\n    request.url = url;\\n    request.reimbursementAddress = payable(reimbursementAddress);\\n    request.member = msg.sender;\\n\\n    memberRequests[request.member].push(requestId);\\n\\n    emit NewRequestCreated(msg.sender, amount);\\n  }\\n\\n  // Used to approve or deny a request. Can be called by approvers only.\\n  function processRequest(uint256 requestId, bool approved)\\n    external\\n    onlyApprover(\\\"Only approvers are allowed to process requests\\\") {\\n\\n    ReimbursementRequest storage request = reimbursementRequests[requestId];\\n    require(msg.sender != request.member,\\n      \\\"An Approver is not allowed to process its own requests\\\");\\n\\n    preProcess(request);\\n    request.approved = approved;\\n    if (request.approved) {\\n      approvedRequests++;\\n      payRequest(request);\\n    } else {\\n      deniedRequests++;\\n    }\\n\\n  }\\n\\n  // Checks preconditions.\\n  function preProcess(ReimbursementRequest storage request) private {\\n    if (request.processed || request.paid) {\\n      revert(\\\"Reimbursement request has been processed already\\\");\\n    }\\n    request.processed = true;\\n  }\\n\\n  // Transfers requested amount to reimbursement address.\\n  function payRequest(ReimbursementRequest storage request) private {\\n    if (request.paid) {\\n      revert(\\\"Reimbursement request has been paid already\\\");\\n    }\\n    if (!request.approved) {\\n      revert(\\\"Reimbursement request has been denied already\\\");\\n    }\\n    request.paid = true;\\n    request.paidBy = msg.sender;\\n    paidOut += request.amount;\\n\\n    emit PaymentTransfered(\\n      msg.sender,\\n      request.reimbursementAddress,\\n      request.amount);\\n\\n    bool success = IERC20(stableCoinAddress).transfer(\\n      request.reimbursementAddress,\\n      request.amount);\\n    require(success);\\n    // return request.reimbursementAddress.transfer(request.amount);\\n  }\\n\\n  // Used to increase balance of the contract.\\n  receive() external payable {\\n    emit BalanceIncreased(msg.sender, msg.value);\\n  }\\n\\n  // Returns whether the sender has a member role.\\n  function isMember() public view returns (bool) {\\n    return hasRole(MEMBER_ROLE, msg.sender);\\n  }\\n\\n  // Returns whether the sender has an approver role.\\n  function isApprover() public view returns (bool) {\\n    return hasRole(APPROVER_ROLE, msg.sender);\\n  }\\n\\n  // Returns all relevant info about the organization.\\n  function getSummary() public view returns (\\n    uint256 requestsNum,\\n    uint256 approvedNum,\\n    uint256 deniedNum,\\n    uint256 category1,\\n    uint256 category2,\\n    uint256 category3,\\n    uint256 category4,\\n    uint256 category5,\\n    uint256 category6,\\n    uint256 paidTotal,\\n    uint256 CO2Pending,\\n    uint256 CO2Total\\n   ) {\\n    requestsNum = numOfRequests;\\n    approvedNum = approvedRequests;\\n    deniedNum = deniedRequests;\\n    category1 = categoryCounters[1];\\n    category2 = categoryCounters[2];\\n    category3 = categoryCounters[3];\\n    category4 = categoryCounters[4];\\n    category5 = categoryCounters[5];\\n    category6 = categoryCounters[6];\\n    paidTotal = paidOut;\\n    CO2Pending = pendingCO2;\\n    CO2Total = totalCO2;\\n  }\\n\\n  // Returns all the reimbursement requests for the caller.\\n  function getMembersRequests()\\n    public\\n    view\\n    returns (ReimbursementRequest[] memory requests) {\\n\\n    uint256 size = memberRequests[msg.sender].length;\\n    requests = new ReimbursementRequest[](size);\\n    for (uint256 index = 0; index < size; index++) {\\n      requests[index] =\\n        reimbursementRequests[memberRequests[msg.sender][index]];\\n    }\\n  }\\n\\n  // Returns all the reimbursement requests.\\n  function getRequests()\\n    public\\n    view\\n    returns (ReimbursementRequest[] memory requests) {\\n    \\n    requests = new ReimbursementRequest[](numOfRequests);\\n    for (uint256 index = 0; index < numOfRequests; index++) {\\n      requests[index] = reimbursementRequests[index];\\n    }\\n  }\\n\\n  // Returns a particular reimbursement request for provided id.\\n  function getRequest(uint256 requestId)\\n    public\\n    view\\n    returns (ReimbursementRequest memory) {\\n\\n    return reimbursementRequests[requestId];\\n  }\\n\\n  // Returns a list of members.\\n  function getMembers()\\n    public\\n    view\\n    returns (address[] memory members) {\\n\\n    uint256 membersCount = getRoleMemberCount(MEMBER_ROLE);\\n    members = new address[](membersCount);\\n\\n    for (uint256 index = 0; index < membersCount; index++) {\\n      members[index] = getRoleMember(MEMBER_ROLE, index);\\n    }\\n  }\\n\\n  // Returns a list of approvers.\\n  function getApprovers()\\n    public\\n    view\\n    returns (address[] memory approvers) {\\n\\n    uint256 approversCount = getRoleMemberCount(APPROVER_ROLE);\\n    approvers = new address[](approversCount);\\n\\n    for (uint256 index = 0; index < approversCount; index++) {\\n      approvers[index] = getRoleMember(APPROVER_ROLE, index);\\n    }\\n  }\\n\\n  // Adds new member.\\n  function addMember(address member)\\n  external\\n  onlyApprover(\\\"Only approver can add new members\\\") {\\n    _setupRole(MEMBER_ROLE, member);\\n  }\\n\\n  // Removes existing member.\\n  function removeMember(address member)\\n  external\\n  onlyApprover(\\\"Only approver can remove members\\\") {\\n    _revokeRole(MEMBER_ROLE, member);\\n  }\\n\\n  function compensateCO2()\\n  external\\n  onlyApprover(\\\"Only approver can offset carbon credits\\\") {\\n    IERC20Burnable(CO2TokenAddress).burn(pendingCO2);\\n    totalCO2 += pendingCO2;\\n    pendingCO2 = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x91c6d4c7f7ca205475f856f666e2759ad5a6d8069ffc23fd70b8fb25b2f94f56\",\"license\":\"MIT\"},\"contracts/ExpenseDAOFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpenseDAO.sol\\\";\\nimport \\\"./Registry.sol\\\";\\n\\ncontract ExpenseDAOFactory {\\n  Registry public registry;\\n  address private co2Token;\\n\\n  constructor(Registry reg, address co2TokenAddress) {\\n    registry = reg;\\n    co2Token = co2TokenAddress;\\n  }\\n\\n  function newExpenseOrg(\\n    string calldata name,\\n    address stableCoin,\\n    address[] calldata approvers,\\n    address[] calldata members)\\n    external returns (ExpenseDAO r) {\\n\\n    r = new ExpenseDAO(stableCoin, co2Token, approvers, members);\\n    registry.register(name, r, msg.sender);\\n  }\\n}\",\"keccak256\":\"0xe6001a379f234b7c47a4831440e5ce29f1013f87a71e981568c9a6ddb1e4836f\",\"license\":\"MIT\"},\"contracts/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n * @dev Interface for the extension of {IERC20} that allows token holders to\\n * destroy both their own tokens and those that they have an allowance for,\\n * in a way that can be recognized off-chain (via event analysis).\\n */\\ninterface IERC20Burnable is IERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xa3d2d46da1fb272ed6aee9a602d2e606d3ffb8ee5375612537df49f901374aae\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ExpenseDAO.sol\\\";\\n\\ncontract Registry {\\n  event NewOrganizationRegistered(\\n    ExpenseDAO indexed organization, address indexed createdBy, string name);\\n  mapping(string => address) public organizations;\\n\\n  function register(\\n    string calldata name,\\n    ExpenseDAO newOrganization,\\n    address createdBy) external {\\n\\n    require(organizations[name] == address(0), \\\"Name already in use\\\");\\n    organizations[name] = address(newOrganization);\\n    emit NewOrganizationRegistered(newOrganization, createdBy, name);\\n  }\\n\\n}\",\"keccak256\":\"0x8357146013c3b26447d8e75917754b16679b0d322b7ede9f02b1709ff6aba683\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80637b103999146200003f578063ca906db81462000061575b600080fd5b6200004962000097565b604051620000589190620004be565b60405180910390f35b6200007f600480360381019062000079919062000283565b620000bb565b6040516200008e9190620004a1565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686868686604051620000f390620001c4565b620001049695949392919062000442565b604051809103906000f08015801562000121573d6000803e3d6000fd5b50905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637915c069898984336040518563ffffffff1660e01b8152600401620001859493929190620004db565b600060405180830381600087803b158015620001a057600080fd5b505af1158015620001b5573d6000803e3d6000fd5b50505050979650505050505050565b6149c1806200063283390190565b600081359050620001e38162000617565b92915050565b60008083601f840112620001fc57600080fd5b8235905067ffffffffffffffff8111156200021657600080fd5b6020830191508360208202830111156200022f57600080fd5b9250929050565b60008083601f8401126200024957600080fd5b8235905067ffffffffffffffff8111156200026357600080fd5b6020830191508360018202830111156200027c57600080fd5b9250929050565b60008060008060008060006080888a0312156200029f57600080fd5b600088013567ffffffffffffffff811115620002ba57600080fd5b620002c88a828b0162000236565b97509750506020620002dd8a828b01620001d2565b955050604088013567ffffffffffffffff811115620002fb57600080fd5b620003098a828b01620001e9565b9450945050606088013567ffffffffffffffff8111156200032957600080fd5b620003378a828b01620001e9565b925092505092959891949750929550565b600062000356838362000362565b60208301905092915050565b6200036d8162000573565b82525050565b6200037e8162000573565b82525050565b600062000392838562000538565b93506200039f8262000521565b8060005b85811015620003e057620003b882846200055a565b620003c4888262000348565b9750620003d1836200052b565b925050600181019050620003a3565b5085925050509392505050565b620003f881620005a7565b82525050565b6200040981620005cf565b82525050565b60006200041d838562000549565b93506200042c838584620005f7565b620004378362000606565b840190509392505050565b600060808201905062000459600083018962000373565b62000468602083018862000373565b81810360408301526200047d81868862000384565b905081810360608301526200049481848662000384565b9050979650505050505050565b6000602082019050620004b86000830184620003ed565b92915050565b6000602082019050620004d56000830184620003fe565b92915050565b60006060820190508181036000830152620004f88186886200040f565b9050620005096020830185620003ed565b62000518604083018462000373565b95945050505050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200056b6020840184620001d2565b905092915050565b6000620005808262000587565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005b482620005bb565b9050919050565b6000620005c88262000587565b9050919050565b6000620005dc82620005e3565b9050919050565b6000620005f08262000587565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b620006228162000573565b81146200062e57600080fd5b5056fe60806040523480156200001157600080fd5b50604051620049c1380380620049c18339818101604052810190620000379190620005e6565b600160008190555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182511162000108576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ff90620006ab565b60405180910390fd5b60005b8251811015620001f457620001887f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a3184838151811062000174577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516200029660201b60201c565b620001de6000801b848381518110620001ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516200029660201b60201c565b8080620001eb90620007aa565b9150506200010b565b5060005b81518110156200028b57620002757fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16883838151811062000261577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516200029660201b60201c565b80806200028290620007aa565b915050620001f8565b5050505050620008d0565b620002a88282620002ac60201b60201c565b5050565b620002c38282620002f460201b62001ff21760201c565b620002ef8160026000858152602001908152602001600020620003e560201b620020d21790919060201c565b505050565b6200030682826200041d60201b60201c565b620003e157600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003866200048860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000415836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200049060201b60201c565b905092915050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b6000620004a483836200050a60201b60201c565b620004ff57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000504565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000620005446200053e84620006f6565b620006cd565b905080838252602082019050828560208602820111156200056457600080fd5b60005b858110156200059857816200057d8882620005a2565b84526020840193506020830192505060018101905062000567565b5050509392505050565b600081519050620005b381620008b6565b92915050565b600082601f830112620005cb57600080fd5b8151620005dd8482602086016200052d565b91505092915050565b60008060008060808587031215620005fd57600080fd5b60006200060d87828801620005a2565b94505060206200062087828801620005a2565b935050604085015167ffffffffffffffff8111156200063e57600080fd5b6200064c87828801620005b9565b925050606085015167ffffffffffffffff8111156200066a57600080fd5b6200067887828801620005b9565b91505092959194509250565b60006200069360308362000725565b9150620006a08262000867565b604082019050919050565b60006020820190508181036000830152620006c68162000684565b9050919050565b6000620006d9620006ec565b9050620006e7828262000774565b919050565b6000604051905090565b600067ffffffffffffffff82111562000714576200071362000827565b5b602082029050602081019050919050565b600082825260208201905092915050565b600062000743826200074a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200077f8262000856565b810181811067ffffffffffffffff82111715620007a157620007a062000827565b5b80604052505050565b6000620007b7826200076a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620007ed57620007ec620007f8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4174206c656173742074776f20617070726f766572206164647265737365732060008201527f6d7573742062652070726f766964656400000000000000000000000000000000602082015250565b620008c18162000736565b8114620008cd57600080fd5b50565b6140e180620008e06000396000f3fe6080604052600436106101855760003560e01c806391d14854116100d1578063c58343ef1161008a578063d02982cf11610064578063d02982cf146105fe578063d547741f14610629578063f9758e8e14610652578063fbc4c2a01461067b576101da565b8063c58343ef1461055b578063ca15c87314610598578063ca6d56dc146105d5576101da565b806391d1485414610447578063982aae46146104845780639eab5253146104af578063a10f469e146104da578063a217fddf14610505578063c066b94914610530576101da565b80634051ddac1161013e5780637048362311610118578063704836231461038b5780637d12ba50146103b45780638813ce12146103df5780639010d07c1461040a576101da565b80634051ddac146102ff5780634245962b146103355780636cb3e8ef14610360576101da565b806301ffc9a7146101df5780630b1ca49a1461021c578063238b47ec14610245578063248a9ca3146102705780632f2ff15d146102ad57806336568abe146102d6576101da565b366101da573373ffffffffffffffffffffffffffffffffffffffff167f7a702e80a9c183a6ce9d6732991df2e914555ba35a364a70aed2433984e7544b346040516101d09190613902565b60405180910390a2005b600080fd5b3480156101eb57600080fd5b5061020660048036038101906102019190613012565b610692565b60405161021391906137c8565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190612f1f565b61070c565b005b34801561025157600080fd5b5061025a6107dd565b60405161026791906137c8565b60405180910390f35b34801561027c57600080fd5b5061029760048036038101906102929190612f71565b61080e565b6040516102a491906137e3565b60405180910390f35b3480156102b957600080fd5b506102d460048036038101906102cf9190612f9a565b61082e565b005b3480156102e257600080fd5b506102fd60048036038101906102f89190612f9a565b61084f565b005b34801561030b57600080fd5b506103146108d2565b60405161032c9c9b9a9998979695949392919061391d565b60405180910390f35b34801561034157600080fd5b5061034a6109ac565b60405161035791906137e3565b60405180910390f35b34801561036c57600080fd5b506103756109d0565b6040516103829190613784565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad919061313a565b610b30565b005b3480156103c057600080fd5b506103c9610ce1565b6040516103d691906137a6565b60405180910390f35b3480156103eb57600080fd5b506103f4611169565b60405161040191906137a6565b60405180910390f35b34801561041657600080fd5b50610431600480360381019061042c9190612fd6565b61152c565b60405161043e9190613740565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612f9a565b61155b565b60405161047b91906137c8565b60405180910390f35b34801561049057600080fd5b506104996115c6565b6040516104a69190613740565b60405180910390f35b3480156104bb57600080fd5b506104c46115ec565b6040516104d19190613784565b60405180910390f35b3480156104e657600080fd5b506104ef61174c565b6040516104fc91906137e3565b60405180910390f35b34801561051157600080fd5b5061051a611770565b60405161052791906137e3565b60405180910390f35b34801561053c57600080fd5b50610545611777565b6040516105529190613740565b60405180910390f35b34801561056757600080fd5b50610582600480360381019061057d9190613111565b61179d565b60405161058f91906138e0565b60405180910390f35b3480156105a457600080fd5b506105bf60048036038101906105ba9190612f71565b611a87565b6040516105cc9190613902565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f79190612f1f565b611aab565b005b34801561060a57600080fd5b50610613611b5f565b60405161062091906137c8565b60405180910390f35b34801561063557600080fd5b50610650600480360381019061064b9190612f9a565b611b90565b005b34801561065e57600080fd5b506106796004803603810190610674919061303b565b611bb1565b005b34801561068757600080fd5b50610690611eb7565b005b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610705575061070482612102565b5b9050919050565b6040518060400160405280602081526020017f4f6e6c7920617070726f7665722063616e2072656d6f7665206d656d6265727381525061076c7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b81906107ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a591906137fe565b60405180910390fd5b506107d97fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1688361217c565b5050565b60006108097f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b905090565b600060016000838152602001908152602001600020600101549050919050565b6108378261080e565b610840816121b0565b61084a83836121c4565b505050565b6108576121f8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb906138c0565b60405180910390fd5b6108ce828261217c565b5050565b6000806000806000806000806000806000806003549b506005549a506004549950600d6000600160ff168152602001908152602001600020549850600d6000600260ff168152602001908152602001600020549750600d6000600360ff168152602001908152602001600020549650600d6000600460ff168152602001908152602001600020549550600d6000600560ff168152602001908152602001600020549450600d6000600660ff168152602001908152602001600020549350600654925060085491506007549050909192939495969798999a9b565b7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a3181565b606060006109fd7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a31611a87565b90508067ffffffffffffffff811115610a3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a6d5781602001602082028036833780820191505090505b50915060005b81811015610b2b57610aa57f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a318261152c565b838281518110610ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610b2390613cc7565b915050610a73565b505090565b6040518060600160405280602e815260200161407e602e9139610b737f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b8190610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac91906137fe565b60405180910390fd5b506000600b600085815260200190815260200160002090508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610c60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5790613860565b60405180910390fd5b610c6981612200565b828160040160026101000a81548160ff0219169083151502179055508060040160029054906101000a900460ff1615610cc25760056000815480929190610caf90613cc7565b9190505550610cbd8161228b565b610cdb565b60046000815480929190610cd590613cc7565b91905055505b50505050565b60606000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090508067ffffffffffffffff811115610d6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610da357816020015b610d90612cec565b815260200190600190039081610d885790505b50915060005b8181101561116457600b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610e2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806101a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff161515151581526020016004820160029054906101000a900460ff161515151581526020016004820160039054906101000a900460ff161515151581526020016004820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782018054610ff990613c95565b80601f016020809104026020016040519081016040528092919081815260200182805461102590613c95565b80156110725780601f1061104757610100808354040283529160200191611072565b820191906000526020600020905b81548152906001019060200180831161105557829003601f168201915b5050505050815260200160088201805461108b90613c95565b80601f01602080910402602001604051908101604052809291908181526020018280546110b790613c95565b80156111045780601f106110d957610100808354040283529160200191611104565b820191906000526020600020905b8154815290600101906020018083116110e757829003601f168201915b505050505081525050838281518110611146577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061115c90613cc7565b915050610da9565b505090565b606060035467ffffffffffffffff8111156111ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111e657816020015b6111d3612cec565b8152602001906001900390816111cb5790505b50905060005b60035481101561152857600b6000828152602001908152602001600020604051806101a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff161515151581526020016004820160029054906101000a900460ff161515151581526020016004820160039054906101000a900460ff161515151581526020016004820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820180546113bd90613c95565b80601f01602080910402602001604051908101604052809291908181526020018280546113e990613c95565b80156114365780601f1061140b57610100808354040283529160200191611436565b820191906000526020600020905b81548152906001019060200180831161141957829003601f168201915b5050505050815260200160088201805461144f90613c95565b80601f016020809104026020016040519081016040528092919081815260200182805461147b90613c95565b80156114c85780601f1061149d576101008083540402835291602001916114c8565b820191906000526020600020905b8154815290600101906020018083116114ab57829003601f168201915b50505050508152505082828151811061150a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061152090613cc7565b9150506111ec565b5090565b6000611553826002600086815260200190815260200160002061252190919063ffffffff16565b905092915050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006116197fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf168611a87565b90508067ffffffffffffffff81111561165b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116895781602001602082028036833780820191505090505b50915060005b81811015611747576116c17fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1688261152c565b8382815181106116fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061173f90613cc7565b91505061168f565b505090565b7fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16881565b6000801b81565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117a5612cec565b600b6000838152602001908152602001600020604051806101a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900460ff161515151581526020016004820160029054906101000a900460ff161515151581526020016004820160039054906101000a900460ff161515151581526020016004820160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078201805461196c90613c95565b80601f016020809104026020016040519081016040528092919081815260200182805461199890613c95565b80156119e55780601f106119ba576101008083540402835291602001916119e5565b820191906000526020600020905b8154815290600101906020018083116119c857829003601f168201915b505050505081526020016008820180546119fe90613c95565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2a90613c95565b8015611a775780601f10611a4c57610100808354040283529160200191611a77565b820191906000526020600020905b815481529060010190602001808311611a5a57829003601f168201915b5050505050815250509050919050565b6000611aa46002600084815260200190815260200160002061253b565b9050919050565b60405180606001604052806021815260200161401060219139611aee7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b8190611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2791906137fe565b60405180910390fd5b50611b5b7fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf16883612550565b5050565b6000611b8b7fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1683361155b565b905090565b611b998261080e565b611ba2816121b0565b611bac838361217c565b505050565b60405180606001604052806026815260200161405860269139611bf47fffa60083152bd11704a80cc8c7a409dad8aa74288b454a3ba0e94c0abc7cf1683361155b565b80611c255750611c247f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b5b8190611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e91906137fe565b60405180910390fd5b50600060036000815480929190611c7d90613cc7565b919050559050600d60008460ff1660ff1681526020019081526020016000206000815480929190611cad90613cc7565b91905055508360086000828254611cc49190613a81565b925050819055506000600b60008381526020019081526020016000209050818160000181905550868160010181905550838160040160006101000a81548160ff021916908360ff1602179055508481600301819055508581600201819055508b8b826007019190611d36929190612d9f565b508989826008019190611d4a929190612d9f565b50878160040160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60008260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f23a574744299f6d7840c73914637acbc1340419b257011bbf94e0f48e158e8ca88604051611ea19190613902565b60405180910390a2505050505050505050505050565b60405180606001604052806027815260200161403160279139611efa7f5ff1fb0ce9089603e6e193667ed17164e0360a6148f4a39fc194055588948a313361155b565b8190611f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3391906137fe565b60405180910390fd5b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c686008546040518263ffffffff1660e01b8152600401611f9a9190613902565b600060405180830381600087803b158015611fb457600080fd5b505af1158015611fc8573d6000803e3d6000fd5b5050505060085460076000828254611fe09190613a81565b92505081905550600060088190555050565b611ffc828261155b565b6120ce57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506120736121f8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006120fa836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61255e565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806121755750612174826125ce565b5b9050919050565b6121868282612638565b6121ab816002600085815260200190815260200160002061271a90919063ffffffff16565b505050565b6121c1816121bc6121f8565b61274a565b50565b6121ce8282611ff2565b6121f381600260008581526020019081526020016000206120d290919063ffffffff16565b505050565b600033905090565b8060040160019054906101000a900460ff168061222b57508060040160039054906101000a900460ff165b1561226b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612262906138a0565b60405180910390fd5b60018160040160016101000a81548160ff02191690831515021790555050565b8060040160039054906101000a900460ff16156122dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d490613880565b60405180910390fd5b8060040160029054906101000a900460ff1661232e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232590613820565b60405180910390fd5b60018160040160036101000a81548160ff021916908315150217905550338160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010154600660008282546123a49190613a81565b925050819055508060040160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffdb2bc0ebc2e58404f3ad5b20d3ec351f2b7b7bf6a21e18beaa7d296d2f01ba583600101546040516124309190613902565b60405180910390a36000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360040160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600101546040518363ffffffff1660e01b81526004016124bf92919061375b565b602060405180830381600087803b1580156124d957600080fd5b505af11580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125119190612f48565b90508061251d57600080fd5b5050565b600061253083600001836127e7565b60001c905092915050565b600061254982600001612838565b9050919050565b61255a82826121c4565b5050565b600061256a8383612849565b6125c35782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506125c8565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612642828261155b565b156127165760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506126bb6121f8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612742836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61286c565b905092915050565b612754828261155b565b6127e3576127798173ffffffffffffffffffffffffffffffffffffffff1660146129f2565b6127878360001c60206129f2565b604051602001612798929190613706565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127da91906137fe565b60405180910390fd5b5050565b6000826000018281548110612825577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146129e657600060018261289e9190613b31565b90506000600186600001805490506128b69190613b31565b90508181146129715760008660000182815481106128fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612947577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806129ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506129ec565b60009150505b92915050565b606060006002836002612a059190613ad7565b612a0f9190613a81565b67ffffffffffffffff811115612a4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a805781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612b68577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612ba89190613ad7565b612bb29190613a81565b90505b6001811115612c9e577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612c1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612c57577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612c9790613c6b565b9050612bb5565b5060008414612ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd990613840565b60405180910390fd5b8091505092915050565b604051806101a0016040528060008152602001600081526020016000815260200160008152602001600060ff168152602001600015158152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b828054612dab90613c95565b90600052602060002090601f016020900481019282612dcd5760008555612e14565b82601f10612de657803560ff1916838001178555612e14565b82800160010185558215612e14579182015b82811115612e13578235825591602001919060010190612df8565b5b509050612e219190612e25565b5090565b5b80821115612e3e576000816000905550600101612e26565b5090565b600081359050612e5181613f85565b92915050565b600081359050612e6681613f9c565b92915050565b600081519050612e7b81613f9c565b92915050565b600081359050612e9081613fb3565b92915050565b600081359050612ea581613fca565b92915050565b60008083601f840112612ebd57600080fd5b8235905067ffffffffffffffff811115612ed657600080fd5b602083019150836001820283011115612eee57600080fd5b9250929050565b600081359050612f0481613fe1565b92915050565b600081359050612f1981613ff8565b92915050565b600060208284031215612f3157600080fd5b6000612f3f84828501612e42565b91505092915050565b600060208284031215612f5a57600080fd5b6000612f6884828501612e6c565b91505092915050565b600060208284031215612f8357600080fd5b6000612f9184828501612e81565b91505092915050565b60008060408385031215612fad57600080fd5b6000612fbb85828601612e81565b9250506020612fcc85828601612e42565b9150509250929050565b60008060408385031215612fe957600080fd5b6000612ff785828601612e81565b925050602061300885828601612ef5565b9150509250929050565b60006020828403121561302457600080fd5b600061303284828501612e96565b91505092915050565b600080600080600080600080600060e08a8c03121561305957600080fd5b60008a013567ffffffffffffffff81111561307357600080fd5b61307f8c828d01612eab565b995099505060208a013567ffffffffffffffff81111561309e57600080fd5b6130aa8c828d01612eab565b975097505060406130bd8c828d01612e42565b95505060606130ce8c828d01612ef5565b94505060806130df8c828d01612ef5565b93505060a06130f08c828d01612ef5565b92505060c06131018c828d01612f0a565b9150509295985092959850929598565b60006020828403121561312357600080fd5b600061313184828501612ef5565b91505092915050565b6000806040838503121561314d57600080fd5b600061315b85828601612ef5565b925050602061316c85828601612e57565b9150509250929050565b600061318283836131c0565b60208301905092915050565b600061319a8383613499565b905092915050565b6131ab81613c02565b82525050565b6131ba81613b77565b82525050565b6131c981613b65565b82525050565b6131d881613b65565b82525050565b60006131e9826139f7565b6131f38185613a32565b93506131fe836139d7565b8060005b8381101561322f5781516132168882613176565b975061322183613a18565b925050600181019050613202565b5085935050505092915050565b600061324782613a02565b6132518185613a43565b935083602082028501613263856139e7565b8060005b8581101561329f5784840389528151613280858261318e565b945061328b83613a25565b925060208a01995050600181019050613267565b50829750879550505050505092915050565b6132ba81613b89565b82525050565b6132c981613b89565b82525050565b6132d881613b95565b82525050565b60006132e982613a0d565b6132f38185613a54565b9350613303818560208601613c38565b61330c81613d6e565b840191505092915050565b600061332282613a0d565b61332c8185613a65565b935061333c818560208601613c38565b61334581613d6e565b840191505092915050565b600061335b82613a0d565b6133658185613a76565b9350613375818560208601613c38565b80840191505092915050565b600061338e602d83613a65565b915061339982613d7f565b604082019050919050565b60006133b1602083613a65565b91506133bc82613dce565b602082019050919050565b60006133d4603683613a65565b91506133df82613df7565b604082019050919050565b60006133f7602b83613a65565b915061340282613e46565b604082019050919050565b600061341a603083613a65565b915061342582613e95565b604082019050919050565b600061343d601783613a76565b915061344882613ee4565b601782019050919050565b6000613460601183613a76565b915061346b82613f0d565b601182019050919050565b6000613483602f83613a65565b915061348e82613f36565b604082019050919050565b60006101a0830160008301516134b260008601826136d9565b5060208301516134c560208601826136d9565b5060408301516134d860408601826136d9565b5060608301516134eb60608601826136d9565b5060808301516134fe60808601826136f7565b5060a083015161351160a08601826132b1565b5060c083015161352460c08601826132b1565b5060e083015161353760e08601826132b1565b5061010083015161354c6101008601826131b1565b506101208301516135616101208601826131c0565b506101408301516135766101408601826131c0565b5061016083015184820361016086015261359082826132de565b9150506101808301518482036101808601526135ac82826132de565b9150508091505092915050565b60006101a0830160008301516135d260008601826136d9565b5060208301516135e560208601826136d9565b5060408301516135f860408601826136d9565b50606083015161360b60608601826136d9565b50608083015161361e60808601826136f7565b5060a083015161363160a08601826132b1565b5060c083015161364460c08601826132b1565b5060e083015161365760e08601826132b1565b5061010083015161366c6101008601826131b1565b506101208301516136816101208601826131c0565b506101408301516136966101408601826131c0565b506101608301518482036101608601526136b082826132de565b9150506101808301518482036101808601526136cc82826132de565b9150508091505092915050565b6136e281613beb565b82525050565b6136f181613beb565b82525050565b61370081613bf5565b82525050565b600061371182613430565b915061371d8285613350565b915061372882613453565b91506137348284613350565b91508190509392505050565b600060208201905061375560008301846131cf565b92915050565b600060408201905061377060008301856131a2565b61377d60208301846136e8565b9392505050565b6000602082019050818103600083015261379e81846131de565b905092915050565b600060208201905081810360008301526137c0818461323c565b905092915050565b60006020820190506137dd60008301846132c0565b92915050565b60006020820190506137f860008301846132cf565b92915050565b600060208201905081810360008301526138188184613317565b905092915050565b6000602082019050818103600083015261383981613381565b9050919050565b60006020820190508181036000830152613859816133a4565b9050919050565b60006020820190508181036000830152613879816133c7565b9050919050565b60006020820190508181036000830152613899816133ea565b9050919050565b600060208201905081810360008301526138b98161340d565b9050919050565b600060208201905081810360008301526138d981613476565b9050919050565b600060208201905081810360008301526138fa81846135b9565b905092915050565b600060208201905061391760008301846136e8565b92915050565b600061018082019050613933600083018f6136e8565b613940602083018e6136e8565b61394d604083018d6136e8565b61395a606083018c6136e8565b613967608083018b6136e8565b61397460a083018a6136e8565b61398160c08301896136e8565b61398e60e08301886136e8565b61399c6101008301876136e8565b6139aa6101208301866136e8565b6139b86101408301856136e8565b6139c66101608301846136e8565b9d9c50505050505050505050505050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a8c82613beb565b9150613a9783613beb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613acc57613acb613d10565b5b828201905092915050565b6000613ae282613beb565b9150613aed83613beb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b2657613b25613d10565b5b828202905092915050565b6000613b3c82613beb565b9150613b4783613beb565b925082821015613b5a57613b59613d10565b5b828203905092915050565b6000613b7082613bcb565b9050919050565b6000613b8282613bcb565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613c0d82613c14565b9050919050565b6000613c1f82613c26565b9050919050565b6000613c3182613bcb565b9050919050565b60005b83811015613c56578082015181840152602081019050613c3b565b83811115613c65576000848401525b50505050565b6000613c7682613beb565b91506000821415613c8a57613c89613d10565b5b600182039050919050565b60006002820490506001821680613cad57607f821691505b60208210811415613cc157613cc0613d3f565b5b50919050565b6000613cd282613beb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d0557613d04613d10565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f5265696d62757273656d656e74207265717565737420686173206265656e206460008201527f656e69656420616c726561647900000000000000000000000000000000000000602082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416e20417070726f766572206973206e6f7420616c6c6f77656420746f20707260008201527f6f6365737320697473206f776e20726571756573747300000000000000000000602082015250565b7f5265696d62757273656d656e74207265717565737420686173206265656e207060008201527f61696420616c7265616479000000000000000000000000000000000000000000602082015250565b7f5265696d62757273656d656e74207265717565737420686173206265656e207060008201527f726f63657373656420616c726561647900000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613f8e81613b65565b8114613f9957600080fd5b50565b613fa581613b89565b8114613fb057600080fd5b50565b613fbc81613b95565b8114613fc757600080fd5b50565b613fd381613b9f565b8114613fde57600080fd5b50565b613fea81613beb565b8114613ff557600080fd5b50565b61400181613bf5565b811461400c57600080fd5b5056fe4f6e6c7920617070726f7665722063616e20616464206e6577206d656d626572734f6e6c7920617070726f7665722063616e206f666673657420636172626f6e2063726564697473596f7520617265206e6f7420616c6c6f77656420746f206372656174652072657175657374734f6e6c7920617070726f766572732061726520616c6c6f77656420746f2070726f63657373207265717565737473a2646970667358221220a59cad05490b624b56620413a5d1858def9dc11d291b60a27fac7c55d1529c0e64736f6c63430008040033a26469706673582212206ac7db084209885578ba71c527534649407bcb173e0da7672cd20f5356fe38ab64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2367,
        "contract": "contracts/ExpenseDAOFactory.sol:ExpenseDAOFactory",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Registry)2500"
      },
      {
        "astId": 2369,
        "contract": "contracts/ExpenseDAOFactory.sol:ExpenseDAOFactory",
        "label": "co2Token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Registry)2500": {
        "encoding": "inplace",
        "label": "contract Registry",
        "numberOfBytes": "20"
      }
    }
  }
}