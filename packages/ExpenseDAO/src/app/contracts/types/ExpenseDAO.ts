/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BalanceIncreased = ContractEventLog<{
  fromAddress: string;
  amount: string;
  0: string;
  1: string;
}>;
export type NewRequestCreated = ContractEventLog<{
  member: string;
  amount: string;
  0: string;
  1: string;
}>;
export type PaymentTransfered = ContractEventLog<{
  approver: string;
  reimbursementAddress: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ExpenseDAO extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ExpenseDAO;
  clone(): ExpenseDAO;
  methods: {
    APPROVER_ROLE(): NonPayableTransactionObject<string>;

    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MEMBER_ROLE(): NonPayableTransactionObject<string>;

    approvedRequests(): NonPayableTransactionObject<string>;

    createRequest(
      description: string,
      url: string,
      reimbursementAddress: string,
      amount: number | string | BN,
      date: number | string | BN,
      category: number | string | BN
    ): NonPayableTransactionObject<void>;

    deniedRequests(): NonPayableTransactionObject<string>;

    getMembersRequests(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getRequest(
      requestId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getRequests(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getSummary(): NonPayableTransactionObject<{
      requestsNum: string;
      approvedNum: string;
      deniedNum: string;
      category1: string;
      category2: string;
      category3: string;
      category4: string;
      category5: string;
      category6: string;
      paidTotal: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isApprover(): NonPayableTransactionObject<boolean>;

    isMember(): NonPayableTransactionObject<boolean>;

    numOfRequests(): NonPayableTransactionObject<string>;

    paidOut(): NonPayableTransactionObject<string>;

    processRequest(
      requestId: number | string | BN,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    BalanceIncreased(cb?: Callback<BalanceIncreased>): EventEmitter;
    BalanceIncreased(
      options?: EventOptions,
      cb?: Callback<BalanceIncreased>
    ): EventEmitter;

    NewRequestCreated(cb?: Callback<NewRequestCreated>): EventEmitter;
    NewRequestCreated(
      options?: EventOptions,
      cb?: Callback<NewRequestCreated>
    ): EventEmitter;

    PaymentTransfered(cb?: Callback<PaymentTransfered>): EventEmitter;
    PaymentTransfered(
      options?: EventOptions,
      cb?: Callback<PaymentTransfered>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BalanceIncreased", cb: Callback<BalanceIncreased>): void;
  once(
    event: "BalanceIncreased",
    options: EventOptions,
    cb: Callback<BalanceIncreased>
  ): void;

  once(event: "NewRequestCreated", cb: Callback<NewRequestCreated>): void;
  once(
    event: "NewRequestCreated",
    options: EventOptions,
    cb: Callback<NewRequestCreated>
  ): void;

  once(event: "PaymentTransfered", cb: Callback<PaymentTransfered>): void;
  once(
    event: "PaymentTransfered",
    options: EventOptions,
    cb: Callback<PaymentTransfered>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
